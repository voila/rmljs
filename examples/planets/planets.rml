type coord = {
    x : float;
    y : float;
    z : float;
  }
;;

type planet = {
    id : int;
    masse : float;
    pos : coord;
    v : coord;
  }
;;


(* constantes *)
let g = 6.67 (*10^-11*)
;;
let dt = 0.1
;;

(* --------------------------------------------------------------------- *)
(* fonctions aux *)
let v_init() =
  {x = (Random.float 100.0) -. 50.0;
   y = (Random.float 100.0) -. 50.0;
   z = (Random.float 100.0) -. 50.0;}
;;

let new_pos x y =
  let max_x_2 = (Graph.size_x()) / 2 in
  let max_y_2 = (Graph.size_y()) / 2 in
  {x = float_of_int (x - max_x_2);
   y = float_of_int (y - max_y_2);
   z = (Random.float 200.0) -. 100.0;}
;;

let color_of_int = function
  | 0 -> Graph.orange
  | 1 -> Graph.blue
  | 2 -> Graph.green
  | 3 -> Graph.red
  | 4 -> Graph.cyan
  | 5 -> Graph.black
  | 6 -> Graph.magenta
  | _ -> Graph.black
;;
(* --------------------------------------------------------------------- *)

(* fonction de maj *)
let compute_pos =
  let distance2 pos1 pos2 =
    (pos2.x -. pos1.x)*.(pos2.x -. pos1.x)
      +. (pos2.y -. pos1.y)*.(pos2.y -. pos1.y)
      +. (pos2.z -. pos1.z)*.(pos2.z -. pos1.z)
  in
  let force p1 p2 =
    let d2 = distance2 p1.pos p2.pos in
    let d = sqrt d2 in
    if (d <> 0.0) then
      let  f12 = g *. ( (* p1.masse *. *) p2.masse) /. d2 in
      (f12 *. (p2.pos.x -. p1.pos.x) /. d,
       f12 *. (p2.pos.y -. p1.pos.y) /. d,
       f12 *. (p2.pos.z -. p1.pos.z) /. d)
    else
      (0.0, 0.0, 0.0)
  in
  fun me all ->
    let fx, fy, fz =
      (List.fold_left
	 (fun (fx,fy,fz) p ->
	   let x,y,z = force me p in
	   (fx +. x),
	   (fy +. y),
	   (fz +. z))
	 (0.0, 0.0, 0.0)
	 all)
    in
    let v = {x = (me).v.x +. fx *. dt;
	     y = (me).v.y +. fy *. dt;
	     z = (me).v.z +. fz *. dt;}
    in
    let pos = {x = (me).pos.x +. v.x *. dt;
	       y = (me).pos.y +. v.y *. dt;
	       z = (me).pos.z +. v.z *. dt;}
    in
    {id = (me).id;
     masse = (me).masse;
     pos = pos;
     v = v;}
;;

let maj_aff all =
  Graph.clear_graph();
  let max_x_2 = (float_of_int (Graph.size_x())) /. 2. in
  let max_y_2 = (float_of_int (Graph.size_y())) /. 2. in
  List.iter
    (fun p ->
     let x0 = p.pos.x +. max_x_2 in
     let y0 = p.pos.y +. max_y_2 in
     let rad = if (-200.0 < p.pos.z) && (p.pos.z < 5000.0) 
               then 5. +. (p.pos.z /. 50.)
	             else 1. in
     let clr = color_of_int (p.id mod 7) in
     Graph.fill_circle x0 y0 rad clr)
    all
;;

(****************************************************************************)
let process planet id masse pos_init v_init p =
  let me = ref {id = id; masse = masse; pos = pos_init; v = v_init} in
  loop
    emit p !me;
    await p (all) in
    me := compute_pos !me all
  end
;;

let process soleil id masse pos_init p =
  let me = {id = id; masse = masse; pos = pos_init; v = {x=0.0;y=0.0;z=0.0}} in
  loop
    emit p (me);
    pause
  end
;;

(* Interface graphique *)
let process click_of_button_down click =
  loop
    if Graph.button_down() then emit click (Graph.mouse_pos());
    pause
  end
;;

let process key_of_key_pressed key =
  loop
    if Graph.key_pressed() then emit key (Graph.read_key());
    pause
  end
;;

let process fenetre new_planet p kill_sun kill suspend =
  let process read_click =
    signal click in
    run (click_of_button_down click)
    ||
    loop
      present click then
         pause
      else
        await immediate one click(x,y) in
        emit new_planet (new_pos x y);
        pause
    end
  in
  let process read_key =
    signal key in
    run (key_of_key_pressed key)
    ||
    loop
      await immediate one key(c) in
      print_string ("key_pressed = ");print_char c;print_newline();
      begin
	match c with
	| 's' -> emit kill_sun
	| 'k' -> emit kill
	| 'p' -> emit suspend
	| 'q' -> exit 0
	| _ -> nothing
      end;
      pause
    end
  in
  signal aff in
  (* Graph.open_graph (); *)
  (* Graph.auto_synchronize false; *)
  begin
    loop
      await p (all) in
      maj_aff all;
      (* Graph.synchronize(); *)

      pause;
      pause;

    end
    ||
    run read_click
    ||
    run read_key
  end
;;

let rec process add_aux id new_planet kill kill_new p =
  await new_planet (pos) in
  do
    run (planet id 1.0 (List.hd pos) (v_init()) p)
  until kill_new done
  ||
  signal new_kill_new in
  run (add_aux (id+1) new_planet kill new_kill_new p)
  ||
  (await new_planet || await immediate kill_new);
  await kill;
  emit new_kill_new
;;

let process add id new_planet kill p =
  run (add_aux id new_planet kill kill p)
;;

let process systeme =
  signal p in
  signal new_planet in
  signal kill_sun in
  signal kill in
  signal suspend in
  signal active in
  run (fenetre new_planet p kill_sun kill suspend)
  ||
  control
    do
      run (soleil 0 30000.0 {x=0.0;y=0.0;z=0.0} p)
    until kill_sun done
    ||
    run (planet 1 1.0
	   {x = 0.0; y = -. 200.0; z = 0.0}
	   {x = 30.0; y = 0.0; z = 0.0}
           p)
    ||
    run (planet 2 1.0
	   {x = 0.0; y = 200.0; z = 0.0}
           {x = -. 30.0; y = 0.0; z = 0.0}
	   p)
    ||
    run (planet 3 1.0
	   {x = 200.0; y = 0.0; z = 0.0}
	   {x = 0.0; y = 0.0; z = 30.0}
	   p)
    ||
    run (add 4 new_planet kill p)
  with suspend done
;;

(****************************************************************************)
let process start =
  Random.self_init();
  run systeme
;;




